services:
  db:
    image: ankane/pgvector:v0.5.1  # VersiÃ³n optimizada para ARM
    platform: linux/arm64
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER} -d ${PGDATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 3G
    networks:
      - chat-network
    
  adminchat:
    build: ./adminchat
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - chat-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/login"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    volumes:
      - ./adminchat/staticfiles:/app/staticfiles
    environment:
      - DJANGO_SETTINGS_MODULE=adminchat.settings
    command: >
      bash -c "python manage.py collectstatic --noinput &&
      gunicorn --bind 0.0.0.0:8000 adminchat.wsgi:application"    

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./adminchat/staticfiles:/app/staticfiles
      - ./adminchat/deploy/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      adminchat:
        condition: service_healthy
    networks:
      - chat-network
    
networks:
  chat-network:
    driver: bridge

volumes:
  embeddings_cache:
  pgdata:
  


#  frontend:
#    build: ./frontend
#    ports:
#      - "3000:80"
#    env_file:
#      - .env
#    depends_on:
#      adminchat:
#        condition: service_healthy
#    networks:
#      - chat-network
#    restart: unless-stopped
#    volumes:
#      - ./frontend:/app
#      - /app/node_modules  # Evita sobrescribir node_modules
